
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require(data.table)
Loading required package: data.table
> require(pbapply)
Loading required package: pbapply
> require(RCurl)
Loading required package: RCurl
> require(boxr)
Loading required package: boxr
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘boxr’
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.3     ✔ dplyr   1.0.2
✔ tidyr   1.1.1     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::between()   masks data.table::between()
✖ tidyr::complete()  masks RCurl::complete()
✖ dplyr::filter()    masks stats::filter()
✖ dplyr::first()     masks data.table::first()
✖ dplyr::lag()       masks stats::lag()
✖ dplyr::last()      masks data.table::last()
✖ purrr::transpose() masks data.table::transpose()
> library(stringr)
> library(rvest)
Loading required package: xml2

Attaching package: ‘rvest’

The following object is masked from ‘package:purrr’:

    pluck

The following object is masked from ‘package:readr’:

    guess_encoding

> library(httr)
> library(data.table)
> bsite = 'https://www.energy.gov'
> project_meta = 'doe_nepa_record.RDS'
> document_meta = 'doe_nepa_document_record.RDS'
> doe = readRDS(paste0('agency_nepa_libraries/doe/metadata/',project_meta))
> 
> #doc_dt = readRDS(paste0('agency_nepa_libraries/doe/metadata/',document_meta))
> 
> library(pbapply)
> tmp_doc_lists = pblapply(1:nrow(doe),function(i) {
+   if(url.exists(doe$URL[i])){
+     temp_session = html_session(doe$URL[i])
+     doe$full_url[i] = temp_session$url
+     temp_html = temp_session %>% read_html()
+     doe$project_description[i] <-  temp_html %>% html_nodes('p') %>% html_text(trim=T) %>% .[.!=''] %>% paste(.,collapse= ' ')
+     temp_docs = temp_html %>% html_nodes('.title-link')
+     if(length(temp_docs)>0){
+       temp_doc_dt = data.table(NEPA_ID = doe$NEPA_ID[i],DOCUMENT_TITLE =  temp_docs %>% html_text(trim=T),
+                                DOCUMENT_URL = temp_docs %>% html_attr('href'),FILE_NAME = NA)
+       #if(!all(temp_doc_dt$DOCUMENT_URL %in% doc_dt$DOCUMENT_URL)){
+       temp_doc_dt
+       #}
+     }
+   }
+ },cl = 3)
> 
> 
> doc_dt = rbindlist(tmp_doc_lists,use.names = T,fill = T)
> doc_dt = doc_dt[!duplicated(doc_dt)]
> 
> nonpdf = which(!grepl('pdf$|PDF$',doc_dt$DOCUMENT_URL))
> 
> doc_sites = pblapply(nonpdf,function(i) {
+   hrefs = read_html(paste0(bsite,doc_dt$DOCUMENT_URL[i])) %>% html_nodes('.file a')
+   hrefs = hrefs[grepl('pdf$',hrefs %>% html_attr('href'))]
+   fls = hrefs %>% html_attr('href')
+   hrefs2 = read_html(paste0(bsite,doc_dt$DOCUMENT_URL[i])) %>% html_nodes('#block-system-main a')  
+   if(length(hrefs2)==1){
+   base_sub = str_extract(hrefs2 %>% html_attr('href'),'.+\\.gov')
+   other_files = grep('pdf$',read_html(hrefs2 %>% html_attr('href')) %>% html_nodes('a') %>% html_attr('href'),value = T)
+   fls = c(fls, paste0(base_sub,other_files))
+   }
+   if(length(fls)>0){
+     temp_doc_dt = data.table(NEPA_ID = doc_dt$NEPA_ID[i],DOCUMENT_TITLE =  hrefs %>% html_text(trim=T),
+                              DOCUMENT_URL = fls,FILE_NAME = NA)
+     temp_doc_dt}
+ },cl = 3)
> 
> 
> more_docs = rbindlist(doc_sites[!sapply(doc_sites,function(x) any(class(x)%in%'try-error'))],use.names=T,fill=T)
> 
> doc_dt = rbind(doc_dt,more_docs,use.names=T,fill=T) 
> doc_dt = doc_dt[grepl('pdf$|PDF$',DOCUMENT_URL),]  
Error in .checkTypos(e, names_x) : 
  Object 'DOCUMENT_URL' not found amongst 
Calls: [ ... tryCatchList -> tryCatchOne -> <Anonymous> -> .checkTypos
Execution halted
